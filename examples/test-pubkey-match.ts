import * as secp256k1 from 'secp256k1';
import { CryptoUtils } from '../src/utils/crypto.utils';
import { HoosatNode } from '../src';

async function testPubkeyMatch() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–µ–π\n');

  // –í–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
  const privateKeyHex = '4ca34b781f6eaeee59be8d9629516d9b1d16e587e57890d1b381c72fcb8a9e4a';
  const privateKey = Buffer.from(privateKeyHex, 'hex');

  // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
  const publicKey = Buffer.from(secp256k1.publicKeyCreate(privateKey, true));
  console.log('1Ô∏è‚É£ –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ:');
  console.log(`   ${publicKey.toString('hex')}`);
  console.log(`   –î–ª–∏–Ω–∞: ${publicKey.length} bytes\n`);

  // 2. –°–æ–∑–¥–∞–µ–º –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ –Ω–∞—à CryptoUtils
  const wallet = CryptoUtils.importKeyPair(privateKeyHex);
  console.log('2Ô∏è‚É£ –ê–¥—Ä–µ—Å –∏–∑ importKeyPair:');
  console.log(`   ${wallet.address}\n`);

  // 3. –ü–æ–ª—É—á–∞–µ–º UTXO —Å –Ω–æ–¥—ã
  const node = new HoosatNode({
    host: '54.38.176.95',
    port: 42420,
  });

  console.log('3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º UTXOs —Å –Ω–æ–¥—ã...');
  const utxosResult = await node.getUtxosByAddresses([wallet.address]);

  if (utxosResult.ok && utxosResult.result.utxos.length > 0) {
    const utxo = utxosResult.result.utxos[0];
    const scriptHex = utxo.utxoEntry.scriptPublicKey.scriptPublicKey;

    console.log(`   –ù–∞–π–¥–µ–Ω–æ ${utxosResult.result.utxos.length} UTXO`);
    console.log(`   ScriptPubKey: ${scriptHex}\n`);

    // –ü–∞—Ä—Å–∏–º —Å–∫—Ä–∏–ø—Ç
    const scriptBuf = Buffer.from(scriptHex, 'hex');

    if (scriptBuf.length >= 35 && scriptBuf[0] === 0x21) {
      // ECDSA: 0x21 <33-byte pubkey> 0xab
      const pubkeyInScript = scriptBuf.slice(1, 34);

      console.log('4Ô∏è‚É£ –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –≤ UTXO ScriptPubKey:');
      console.log(`   ${pubkeyInScript.toString('hex')}`);
      console.log(`   –î–ª–∏–Ω–∞: ${pubkeyInScript.length} bytes\n`);

      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
      const match = publicKey.equals(pubkeyInScript);

      console.log('5Ô∏è‚É£ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:');
      if (match) {
        console.log('   ‚úÖ –ö–õ–Æ–ß–ò –°–û–í–ü–ê–î–ê–Æ–¢! –ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –≤ –∫–ª—é—á–∞—Ö.\n');

        // –ó–Ω–∞—á–∏—Ç –ø—Ä–æ–±–ª–µ–º–∞ –≤ signature hash –∏–ª–∏ –≤ –ø–æ–¥–ø–∏—Å–∏
        console.log('‚ö†Ô∏è  –ö–ª—é—á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ, –Ω–æ –ø–æ–¥–ø–∏—Å—å –Ω–µ–≤–µ—Ä–Ω–∞—è.');
        console.log('   –ü—Ä–æ–±–ª–µ–º–∞ –ª–∏–±–æ –≤:');
        console.log('   1. –ê–ª–≥–æ—Ä–∏—Ç–º–µ —Å–æ–∑–¥–∞–Ω–∏—è signature hash');
        console.log('   2. –ê–ª–≥–æ—Ä–∏—Ç–º–µ ECDSA –ø–æ–¥–ø–∏—Å–∏');
        console.log('   3. –§–æ—Ä–º–∞—Ç–µ SignatureScript\n');
      } else {
        console.log('   ‚ùå –ö–õ–Æ–ß–ò –ù–ï –°–û–í–ü–ê–î–ê–Æ–¢!\n');
        console.log('   –ù–∞—à pubkey:  ', publicKey.toString('hex'));
        console.log('   UTXO pubkey: ', pubkeyInScript.toString('hex'));
        console.log('\n   –≠—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ UTXO –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –∞–¥—Ä–µ—Å—É!');
      }
    } else if (scriptBuf.length >= 34 && scriptBuf[0] === 0x20) {
      // Schnorr: 0x20 <32-byte pubkey> 0xac
      console.log('   ‚ö†Ô∏è  –≠—Ç–æ Schnorr UTXO, –∞ –º—ã –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–ø–∏—Å–∞—Ç—å ECDSA!');
    } else {
      console.log('   ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–∫—Ä–∏–ø—Ç–∞');
    }
  } else {
    console.log('   ‚ùå –ù–µ—Ç UTXOs –∏–ª–∏ –æ—à–∏–±–∫–∞:', utxosResult.error);
  }
}

testPubkeyMatch().catch(console.error);
