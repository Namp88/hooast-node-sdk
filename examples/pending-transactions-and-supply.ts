import { HoosatNode } from '../src';

async function demonstrateNewFeatures() {
  const node = new HoosatNode({
    host: '54.38.176.95',
    port: 42420,
  });

  console.log('üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π SDK...\n');

  // ==================== 1. COIN SUPPLY ====================

  console.log('üí∞ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–º–∏—Å—Å–∏–∏...');

  try {
    const supplyResult = await node.getCoinSupply();

    if (supplyResult.ok && supplyResult.result) {
      const supply = supplyResult.result;

      console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–º–∏—Å—Å–∏–∏:');
      console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–º–∏—Å—Å–∏—è: ${node.formatAmount(supply.maxSupply)} HTN`);
      console.log(`   –í –æ–±—Ä–∞—â–µ–Ω–∏–∏: ${node.formatAmount(supply.circulatingSupply)} HTN`);

      // –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø—É—Å–∫–∞
      const circulatingBig = BigInt(supply.circulatingSupply);
      const maxBig = BigInt(supply.maxSupply);
      const percentage = (Number(circulatingBig * 100n) / Number(maxBig)).toFixed(2);

      console.log(`   –í—ã–ø—É—â–µ–Ω–æ: ${percentage}% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞`);

      // –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∫ –≤—ã–ø—É—Å–∫—É
      const remaining = maxBig - circulatingBig;
      console.log(`   –û—Å—Ç–∞–ª–æ—Å—å –∫ –≤—ã–ø—É—Å–∫—É: ${node.formatAmount(remaining.toString())} HTN`);

      // –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–ª—è—Ü–∏–∏
      console.log('\nüìä –ê–Ω–∞–ª–∏–∑ —ç–º–∏—Å—Å–∏–∏:');
      const percentageNum = parseFloat(percentage);

      if (percentageNum < 50) {
        console.log('   üü¢ –†–∞–Ω–Ω—è—è —Å—Ç–∞–¥–∏—è - –º–Ω–æ–≥–æ –º–æ–Ω–µ—Ç –µ—â–µ –±—É–¥–µ—Ç –≤—ã–ø—É—â–µ–Ω–æ');
      } else if (percentageNum < 80) {
        console.log('   üü° –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–¥–∏—è - –∏–Ω—Ñ–ª—è—Ü–∏—è –∑–∞–º–µ–¥–ª—è–µ—Ç—Å—è');
      } else if (percentageNum < 95) {
        console.log('   üü† –ü–æ–∑–¥–Ω—è—è —Å—Ç–∞–¥–∏—è - –Ω–∏–∑–∫–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è');
      } else {
        console.log('   üî¥ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–¥–∏—è - –ø–æ—á—Ç–∏ –≤—Å–µ –º–æ–Ω–µ—Ç—ã –≤—ã–ø—É—â–µ–Ω—ã');
      }
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± —ç–º–∏—Å—Å–∏–∏:', supplyResult.error);
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error);
  }

  // ==================== 2. PENDING TRANSACTIONS ====================

  console.log('\n‚è∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');

  try {
    const addresses = [
      'hoosat:qz8hek32xdryqstk6ptvvfzmrsrns95h7nd2r9f55epnxx7eummegyxa7f2lu',
      'hoosat:qqdythqca8axcrvl7k0ep62yyzprcv8qw4xvlyvwnq7srx3angqrk92n74kut',
    ];

    const pendingResult = await node.getMempoolEntriesByAddresses(addresses);

    if (pendingResult.ok && pendingResult.result) {
      const entries = pendingResult.result.entries;

      console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤: ${entries.length}`);

      let totalPending = 0;

      entries.forEach(entry => {
        const sendingCount = entry.sending.length;
        const receivingCount = entry.receiving.length;
        const totalForAddress = sendingCount + receivingCount;

        if (totalForAddress > 0) {
          console.log(`\nüìç ${entry.address.substring(0, 30)}...:`);

          if (sendingCount > 0) {
            console.log(`   üì§ –ò—Å—Ö–æ–¥—è—â–∏—Ö: ${sendingCount}`);

            entry.sending.forEach((tx, index) => {
              const fee = node.formatAmount(tx.fee);
              const status = tx.isOrphan ? ' (orphan)' : '';
              console.log(`      ${index + 1}. ${tx.transaction.transactionId.substring(0, 20)}... (–∫–æ–º–∏—Å—Å–∏—è: ${fee} HTN)${status}`);
            });
          }

          if (receivingCount > 0) {
            console.log(`   üì• –í—Ö–æ–¥—è—â–∏—Ö: ${receivingCount}`);

            entry.receiving.forEach((tx, index) => {
              const status = tx.isOrphan ? ' (orphan)' : '';
              console.log(`      ${index + 1}. ${tx.transaction.transactionId.substring(0, 20)}...${status}`);
            });
          }
        }

        totalPending += totalForAddress;
      });

      if (totalPending === 0) {
        console.log('‚úÖ Pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      } else {
        console.log(`\nüìä –í—Å–µ–≥–æ pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${totalPending}`);
      }
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', pendingResult.error);
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error);
  }

  // ==================== 3. NETWORK STATISTICS ====================

  console.log('\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏:');

  try {
    // –°–æ–±–∏—Ä–∞–µ–º —Ä–∞–∑–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const [supplyResult, infoResult, hashrateResult] = await Promise.all([
      node.getCoinSupply(),
      node.getInfo(),
      node.estimateNetworkHashesPerSecond().catch(() => null),
    ]);

    console.log('‚úÖ –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');

    if (infoResult.ok && infoResult.result) {
      console.log(`   üì¶ –í–µ—Ä—Å–∏—è –Ω–æ–¥—ã: ${infoResult.result.serverVersion}`);
      console.log(`   üíæ Mempool: ${infoResult.result.mempoolSize} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    }

    if (hashrateResult?.ok && hashrateResult.result) {
      const hashrate = parseFloat(hashrateResult.result.networkHashesPerSecond);
      const hashrateGH = (hashrate / 1e9).toFixed(2);
      console.log(`   ‚ö° –•–µ—à—Ä–µ–π—Ç: ${hashrateGH} GH/s`);
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
  }
}

/**
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
 */
async function monitorPendingTransactions(node: HoosatNode, addresses: string[]): Promise<void> {
  console.log('üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...\n');

  let previousCounts = new Map<string, number>();

  setInterval(async () => {
    try {
      const pendingResult = await node.getMempoolEntriesByAddresses(addresses);

      if (pendingResult.ok && pendingResult.result) {
        const timestamp = new Date().toLocaleTimeString();

        pendingResult.result.entries.forEach(entry => {
          const currentCount = entry.sending.length + entry.receiving.length;
          const previousCount = previousCounts.get(entry.address) || 0;

          if (currentCount !== previousCount) {
            const shortAddress = entry.address.substring(0, 20) + '...';

            if (currentCount > previousCount) {
              console.log(`[${timestamp}] üì§ ${shortAddress}: –Ω–æ–≤–∞—è pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è (${currentCount})`);
            } else if (currentCount < previousCount) {
              console.log(`[${timestamp}] ‚úÖ ${shortAddress}: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (${currentCount})`);
            }

            previousCounts.set(entry.address, currentCount);
          }
        });
      }
    } catch (error) {
      const timestamp = new Date().toLocaleTimeString();
      console.log(`[${timestamp}] –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    }
  }, 15000); // –ö–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
}

/**
 * –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π –≤ mempool
 */
async function analyzeMempoolFees(node: HoosatNode, addresses: string[]): Promise<void> {
  try {
    const pendingResult = await node.getMempoolEntriesByAddresses(addresses);

    if (!pendingResult.ok || !pendingResult.result) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${pendingResult.error}`);
    }

    console.log('üí∏ –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π:');

    const allFees: number[] = [];

    pendingResult.result.entries.forEach(entry => {
      entry.sending.forEach(tx => {
        const feeHTN = parseFloat(node.formatAmount(tx.fee));
        allFees.push(feeHTN);
      });
    });

    if (allFees.length === 0) {
      console.log('   –ù–µ—Ç –∏—Å—Ö–æ–¥—è—â–∏—Ö pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      return;
    }

    allFees.sort((a, b) => a - b);

    const minFee = allFees[0];
    const maxFee = allFees[allFees.length - 1];
    const avgFee = allFees.reduce((a, b) => a + b, 0) / allFees.length;
    const medianFee = allFees[Math.floor(allFees.length / 2)];

    console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${allFees.length}`);
    console.log(`   –ú–∏–Ω. –∫–æ–º–∏—Å—Å–∏—è: ${minFee.toFixed(8)} HTN`);
    console.log(`   –ú–∞–∫—Å. –∫–æ–º–∏—Å—Å–∏—è: ${maxFee.toFixed(8)} HTN`);
    console.log(`   –°—Ä–µ–¥–Ω—è—è: ${avgFee.toFixed(8)} HTN`);
    console.log(`   –ú–µ–¥–∏–∞–Ω–∞: ${medianFee.toFixed(8)} HTN`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∏—Å—Å–∏–π:', error);
  }
}

/**
 * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ç—è–º–∏ –ø–æ —ç–º–∏—Å—Å–∏–∏
 */
async function compareEmissionModels(node: HoosatNode): Promise<void> {
  try {
    const supplyResult = await node.getCoinSupply();

    if (!supplyResult.ok || !supplyResult.result) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± —ç–º–∏—Å—Å–∏–∏');
    }

    const supply = supplyResult.result;
    const maxSupplyHTN = parseFloat(node.formatAmount(supply.maxSupply));
    const circulatingHTN = parseFloat(node.formatAmount(supply.circulatingSupply));

    console.log('üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç–º–∏—Å—Å–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:');

    const networks = [
      { name: 'Bitcoin', maxSupply: 21_000_000, type: '–î–µ—Ñ–ª—è—Ü–∏–æ–Ω–Ω–∞—è' },
      { name: 'Ethereum', maxSupply: null, type: '–ò–Ω—Ñ–ª—è—Ü–∏–æ–Ω–Ω–∞—è' },
      { name: 'Litecoin', maxSupply: 84_000_000, type: '–î–µ—Ñ–ª—è—Ü–∏–æ–Ω–Ω–∞—è' },
      { name: 'Dogecoin', maxSupply: null, type: '–ò–Ω—Ñ–ª—è—Ü–∏–æ–Ω–Ω–∞—è' },
    ];

    console.log(`   Hoosat: ${maxSupplyHTN.toLocaleString()} HTN (–¥–µ—Ñ–ª—è—Ü–∏–æ–Ω–Ω–∞—è)`);

    networks.forEach(network => {
      if (network.maxSupply) {
        const ratio = maxSupplyHTN / network.maxSupply;
        console.log(`   ${network.name}: ${network.maxSupply.toLocaleString()} (${ratio.toFixed(1)}x –º–µ–Ω—å—à–µ Hoosat)`);
      } else {
        console.log(`   ${network.name}: –ë–µ–∑ –ª–∏–º–∏—Ç–∞ (${network.type})`);
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —ç–º–∏—Å—Å–∏–π:', error);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç—ã
export { demonstrateNewFeatures, monitorPendingTransactions, analyzeMempoolFees, compareEmissionModels };

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
if (require.main === module) {
  demonstrateNewFeatures().catch(console.error);
}
