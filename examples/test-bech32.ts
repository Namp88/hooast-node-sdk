import * as bech32Hoosat from '../src/utils/bech32-hoosat';
import { CryptoUtils } from '../src/utils/crypto.utils';

// –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∞–¥—Ä–µ—Å –∏–∑ –æ—à–∏–±–∫–∏
const testAddress = 'hoosat:qz95mwas8ja7ucsernv9z335rdxxqswff7wvzenl29qukn5qs3lsqfsa4pd74';

console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞\n');
console.log(`–ê–¥—Ä–µ—Å: ${testAddress}\n`);

// –®–∞–≥ 1: –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
console.log('1Ô∏è‚É£ –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:');
console.log(`   –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "hoosat:": ${testAddress.startsWith('hoosat:')}`);
console.log(`   –î–ª–∏–Ω–∞ –ø–æ—Å–ª–µ ":": ${testAddress.split(':')[1].length}\n`);

// –®–∞–≥ 2: –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
console.log('2Ô∏è‚É£ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ Bech32:');
try {
  const decoded = bech32Hoosat.decode(testAddress);
  console.log('   ‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
  console.log(`   –í–µ—Ä—Å–∏—è: 0x${decoded.version.toString(16).padStart(2, '0')}`);
  console.log(`   Prefix: ${decoded.prefix}`);
  console.log(`   Payload length: ${decoded.payload.length} –±–∞–π—Ç`);
  console.log(`   Payload (hex): ${decoded.payload.toString('hex')}\n`);

  // –®–∞–≥ 3: –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ CryptoUtils
  console.log('3Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ CryptoUtils.isValidAddress:');
  const isValid = CryptoUtils.isValidAddress(testAddress);
  console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${isValid ? '‚úÖ VALID' : '‚ùå INVALID'}\n`);

  if (!isValid) {
    console.log('‚ö†Ô∏è  –ê–¥—Ä–µ—Å –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç—Å—è, –Ω–æ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é!');
    console.log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é isValidAddress –≤ crypto.utils.ts\n');
  }

  // –®–∞–≥ 4: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ ScriptPublicKey
  console.log('4Ô∏è‚É£ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ ScriptPublicKey:');
  try {
    const scriptPubKey = CryptoUtils.addressToScriptPublicKey(testAddress);
    console.log('   ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
    console.log(`   ScriptPubKey: ${scriptPubKey.toString('hex')}\n`);
  } catch (error) {
    console.error('   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', error.message, '\n');
  }
} catch (error) {
  console.error('   ‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  console.error('   Stack:', error.stack, '\n');
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
console.log('5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∞–¥—Ä–µ—Å–æ–≤:');
const testAddresses = [
  {
    name: 'ECDSA (—Ç–≤–æ–π –∫–æ—à–µ–ª–µ–∫)',
    address: 'hoosat:qyp2uxq7rl0a95npw0yay82chv22l4f33hd8nween0g5jcge4lk57tqsfw88n2d',
  },
  {
    name: '–ö–æ—Ä–æ—Ç–∫–∏–π Schnorr',
    address: 'hoosat:qz7ulu6pwqeq6kxpup85fzuukwx7v5z6zs5xspm0ka',
  },
];

testAddresses.forEach(({ name, address }) => {
  try {
    const decoded = bech32Hoosat.decode(address);
    const isValid = CryptoUtils.isValidAddress(address);
    console.log(`   ${name}: ${isValid ? '‚úÖ' : '‚ùå'} (version: 0x${decoded.version.toString(16)}, len: ${decoded.payload.length})`);
  } catch (error) {
    console.log(`   ${name}: ‚ùå Decode failed`);
  }
});

console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
