// examples/network-hashrate.ts

import { HoosatNode } from '../src';

async function demonstrateNetworkHashrate() {
  const node = new HoosatNode({
    host: '54.38.176.95',
    port: 42420,
  });

  console.log('‚ö° –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à—Ä–µ–π—Ç —Å–µ—Ç–∏...\n');

  try {
    // –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Ö–µ—à—Ä–µ–π—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –±–ª–æ–∫–æ–≤)
    const hashrateResult = await node.estimateNetworkHashesPerSecond();

    if (hashrateResult.ok && hashrateResult.result) {
      const rawHashrate = hashrateResult.result.networkHashesPerSecond;
      const hashrateNum = parseFloat(rawHashrate);

      console.log('‚úÖ –•–µ—à—Ä–µ–π—Ç —Å–µ—Ç–∏:');
      console.log(`   Raw: ${rawHashrate} H/s`);

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Ç–∞–µ–º—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
      const units = formatHashrate(hashrateNum);
      console.log(`   –ß–∏—Ç–∞–µ–º—ã–π: ${units.value} ${units.unit}`);

      // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏
      console.log('\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ç—è–º–∏:');
      const comparison = compareWithOtherNetworks(hashrateNum);
      comparison.forEach(item => {
        console.log(`   ${item.name}: ${item.comparison}`);
      });
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–µ—à—Ä–µ–π—Ç–∞:', hashrateResult.error);
    }

    // –ó–∞–ø—Ä–æ—Å —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã:');

    const periods = [
      { window: 1000, name: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –±–ª–æ–∫–æ–≤ (~7 —á–∞—Å–æ–≤)' },
      { window: 2000, name: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 2000 –±–ª–æ–∫–æ–≤ (~14 —á–∞—Å–æ–≤)' },
      { window: 4320, name: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ (~4320 –±–ª–æ–∫–æ–≤)' },
    ];

    for (const period of periods) {
      try {
        const result = await node.estimateNetworkHashesPerSecond(period.window);

        if (result.ok && result.result) {
          const hashrate = parseFloat(result.result.networkHashesPerSecond);
          const formatted = formatHashrate(hashrate);

          console.log(`   ${period.name}: ${formatted.value} ${formatted.unit}`);
        }
      } catch (error) {
        console.log(`   ${period.name}: –æ—à–∏–±–∫–∞`);
      }
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error);
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ö–µ—à—Ä–µ–π—Ç –≤ —á–∏—Ç–∞–µ–º—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
 */
function formatHashrate(hashesPerSecond: number): { value: string; unit: string } {
  const units = [
    { threshold: 1e18, name: 'EH/s', divisor: 1e18 },
    { threshold: 1e15, name: 'PH/s', divisor: 1e15 },
    { threshold: 1e12, name: 'TH/s', divisor: 1e12 },
    { threshold: 1e9, name: 'GH/s', divisor: 1e9 },
    { threshold: 1e6, name: 'MH/s', divisor: 1e6 },
    { threshold: 1e3, name: 'KH/s', divisor: 1e3 },
    { threshold: 0, name: 'H/s', divisor: 1 },
  ];

  for (const unit of units) {
    if (hashesPerSecond >= unit.threshold) {
      const value = (hashesPerSecond / unit.divisor).toFixed(2);
      return { value, unit: unit.name };
    }
  }

  return { value: hashesPerSecond.toString(), unit: 'H/s' };
}

/**
 * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
 */
function compareWithOtherNetworks(hoosatHashrate: number): Array<{ name: string; comparison: string }> {
  const networks = [
    { name: 'Bitcoin', hashrate: 400e18 }, // ~400 EH/s
    { name: 'Ethereum (–¥–æ PoS)', hashrate: 900e12 }, // ~900 TH/s
    { name: 'Litecoin', hashrate: 500e12 }, // ~500 TH/s
    { name: 'Dogecoin', hashrate: 200e12 }, // ~200 TH/s
  ];

  return networks.map(network => {
    const ratio = hoosatHashrate / network.hashrate;

    if (ratio >= 1) {
      return {
        name: network.name,
        comparison: `${ratio.toFixed(1)}x —Å–∏–ª—å–Ω–µ–µ`,
      };
    } else if (ratio >= 0.1) {
      return {
        name: network.name,
        comparison: `${(ratio * 100).toFixed(1)}% –æ—Ç –º–æ—â–Ω–æ—Å—Ç–∏`,
      };
    } else {
      return {
        name: network.name,
        comparison: `${(1 / ratio).toFixed(0)}x —Å–ª–∞–±–µ–µ`,
      };
    }
  });
}

/**
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ö–µ—à—Ä–µ–π—Ç–∞
 */
async function monitorHashrateChanges(node: HoosatNode): Promise<void> {
  console.log('üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ö–µ—à—Ä–µ–π—Ç–∞...\n');

  let previousHashrate: number | null = null;

  setInterval(async () => {
    try {
      const result = await node.estimateNetworkHashesPerSecond(1000); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ ~7 —á–∞—Å–æ–≤

      if (result.ok && result.result) {
        const currentHashrate = parseFloat(result.result.networkHashesPerSecond);
        const formatted = formatHashrate(currentHashrate);
        const timestamp = new Date().toLocaleTimeString();

        let changeIndicator = '';
        if (previousHashrate !== null) {
          const change = ((currentHashrate - previousHashrate) / previousHashrate) * 100;

          if (Math.abs(change) > 5) {
            // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ 5%
            const direction = change > 0 ? 'üìà' : 'üìâ';
            changeIndicator = ` ${direction} ${change > 0 ? '+' : ''}${change.toFixed(1)}%`;
          }
        }

        console.log(`[${timestamp}] –•–µ—à—Ä–µ–π—Ç: ${formatted.value} ${formatted.unit}${changeIndicator}`);

        previousHashrate = currentHashrate;
      }
    } catch (error) {
      const timestamp = new Date().toLocaleTimeString();
      console.log(`[${timestamp}] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–µ—à—Ä–µ–π—Ç–∞`);
    }
  }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—ã —Å–µ—Ç–∏
 */
async function analyzeNetworkSecurity(node: HoosatNode): Promise<void> {
  console.log('üõ°Ô∏è –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏...\n');

  try {
    const hashrateResult = await node.estimateNetworkHashesPerSecond(4320); // 24 —á–∞—Å–∞

    if (hashrateResult.ok && hashrateResult.result) {
      const hashrate = parseFloat(hashrateResult.result.networkHashesPerSecond);
      const formatted = formatHashrate(hashrate);

      console.log(`–°—Ä–µ–¥–Ω–∏–π —Ö–µ—à—Ä–µ–π—Ç –∑–∞ 24 —á–∞—Å–∞: ${formatted.value} ${formatted.unit}`);

      // –û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      const securityLevel = getSecurityLevel(hashrate);
      console.log(`–£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${securityLevel.emoji} ${securityLevel.description}`);

      // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏ 51%
      const attackCost = calculateAttackCost(hashrate);
      console.log(`–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ç–∞–∫–∏ 51%: ~$${attackCost.toLocaleString()} –≤ —á–∞—Å`);

      // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      console.log('\nüìä –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏:');
      const periods = [1000, 2000, 3000, 4320];
      const hashrates: number[] = [];

      for (const period of periods) {
        const result = await node.estimateNetworkHashesPerSecond(period);
        if (result.ok && result.result) {
          hashrates.push(parseFloat(result.result.networkHashesPerSecond));
        }
      }

      if (hashrates.length === periods.length) {
        const variance = calculateVariance(hashrates);
        const stability = variance < 0.1 ? '–í—ã—Å–æ–∫–∞—è' : variance < 0.3 ? '–°—Ä–µ–¥–Ω—è—è' : '–ù–∏–∑–∫–∞—è';
        console.log(`   –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ö–µ—à—Ä–µ–π—Ç–∞: ${stability} (–¥–∏—Å–ø–µ—Ä—Å–∏—è: ${(variance * 100).toFixed(1)}%)`);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏
 */
function getSecurityLevel(hashrate: number): { emoji: string; description: string } {
  if (hashrate > 100e12) {
    // > 100 TH/s
    return { emoji: 'üü¢', description: '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π - —Å–µ—Ç—å —Ö–æ—Ä–æ—à–æ –∑–∞—â–∏—â–µ–Ω–∞' };
  } else if (hashrate > 10e12) {
    // > 10 TH/s
    return { emoji: 'üü°', description: '–í—ã—Å–æ–∫–∏–π - —Å–µ—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞—â–∏—â–µ–Ω–∞' };
  } else if (hashrate > 1e12) {
    // > 1 TH/s
    return { emoji: 'üü†', description: '–°—Ä–µ–¥–Ω–∏–π - —Ç—Ä–µ–±—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞' };
  } else {
    return { emoji: 'üî¥', description: '–ù–∏–∑–∫–∏–π - —Å–µ—Ç—å —É—è–∑–≤–∏–º–∞ –¥–ª—è –∞—Ç–∞–∫' };
  }
}

/**
 * –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏ 51%
 */
function calculateAttackCost(hashrate: number): number {
  // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç: –Ω—É–∂–Ω–æ 51% —Ö–µ—à—Ä–µ–π—Ç–∞ + —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞
  const attackHashrate = hashrate * 0.51;
  const powerConsumptionWatts = (attackHashrate / 1e12) * 3000; // ~3kW –Ω–∞ TH/s
  const electricityCostPerKWh = 0.05; // $0.05 –∑–∞ kWh
  const hourlyCost = (powerConsumptionWatts / 1000) * electricityCostPerKWh;

  return Math.round(hourlyCost);
}

/**
 * –†–∞—Å—á–µ—Ç –¥–∏—Å–ø–µ—Ä—Å–∏–∏ –º–∞—Å—Å–∏–≤–∞ –∑–Ω–∞—á–µ–Ω–∏–π
 */
function calculateVariance(values: number[]): number {
  const mean = values.reduce((a, b) => a + b, 0) / values.length;
  const variance = values.reduce((acc, val) => acc + Math.pow(val - mean, 2), 0) / values.length;
  return Math.sqrt(variance) / mean; // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏
}

// –≠–∫—Å–ø–æ—Ä—Ç—ã
export { demonstrateNetworkHashrate, monitorHashrateChanges, analyzeNetworkSecurity };

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
if (require.main === module) {
  demonstrateNetworkHashrate().catch(console.error);
}
