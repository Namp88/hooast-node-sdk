import { HoosatNode } from '../src';
import { Transaction, TransactionInput, TransactionOutput } from '../src/models/transaction/transaction.types';

async function demonstrateTransactionSending() {
  const node = new HoosatNode({
    host: '54.38.176.95',
    port: 42420,
  });

  console.log('üí∏ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...\n');

  // ==================== 1. SIMPLE TRANSACTION EXAMPLE ====================

  console.log('üì§ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:');

  try {
    // –í–ê–ñ–ù–û: –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä. –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏:
    // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ UTXO —Å –ø–æ–º–æ—â—å—é getUtxosByAddresses()
    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    // 3. –†–∞—Å—á–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π

    const exampleTransaction: Transaction = {
      version: 1,
      inputs: [
        {
          previousOutpoint: {
            transactionId: 'a1b2c3d4e5f6789...', // ID –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            index: 0, // –ò–Ω–¥–µ–∫—Å output'–∞
          },
          signatureScript: '304502210...', // –ü–æ–¥–ø–∏—Å—å (—Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–æ—à–µ–ª—å–∫–æ–º)
          sequence: '18446744073709551615',
        },
      ],
      outputs: [
        {
          amount: node.parseAmount('10.5'), // 10.5 HTN –≤ sompi
          scriptPublicKey: {
            version: 0,
            scriptPublicKey: '76a914...', // –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ script —Ñ–æ—Ä–º–µ
          },
        },
        {
          amount: node.parseAmount('89.4'), // –°–¥–∞—á–∞
          scriptPublicKey: {
            version: 0,
            scriptPublicKey: '76a914...', // –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (—Å–¥–∞—á–∞)
          },
        },
      ],
      lockTime: '0',
      subnetworkId: '0000000000000000000000000000000000000000',
    };

    console.log('   –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...');

    const submitResult = await node.submitTransaction(exampleTransaction);

    if (submitResult.ok && submitResult.result) {
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      console.log(`   Transaction ID: ${submitResult.result.transactionId}`);
      console.log(`   Explore: https://explorer.hoosat.fi/tx/${submitResult.result.transactionId}`);

      // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      await monitorTransactionStatus(node, submitResult.result.transactionId);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', submitResult.error);
      handleTransactionError(submitResult.error);
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error);
  }
}

/**
 * –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
async function createAndSendTransaction(
  node: HoosatNode,
  fromAddress: string,
  toAddress: string,
  amount: string // –≤ HTN
): Promise<string | null> {
  try {
    console.log(`üí∏ –û—Ç–ø—Ä–∞–≤–∫–∞ ${amount} HTN —Å ${fromAddress.substring(0, 20)}... –Ω–∞ ${toAddress.substring(0, 20)}...`);

    // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ UTXO
    console.log('1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ UTXO...');
    const utxosResult = await node.getUtxosByAddresses([fromAddress]);

    if (!utxosResult.ok || !utxosResult.result) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è UTXO: ${utxosResult.error}`);
    }

    const availableUtxos = utxosResult.result.utxos;
    if (availableUtxos.length === 0) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö UTXO –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    }

    // –®–∞–≥ 2: –í—ã–±–∏—Ä–∞–µ–º UTXO –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('2Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ–º UTXO –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    const targetAmountSompi = BigInt(node.parseAmount(amount));
    const selectedUtxos = selectUtxosForAmount(availableUtxos, targetAmountSompi);

    if (selectedUtxos.length === 0) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    }

    const totalInputAmount = selectedUtxos.reduce((sum, utxo) => {
      return sum + BigInt(utxo.utxoEntry.amount);
    }, 0n);

    console.log(`   –í—ã–±—Ä–∞–Ω–æ ${selectedUtxos.length} UTXO –Ω–∞ —Å—É–º–º—É ${node.formatAmount(totalInputAmount.toString())} HTN`);

    // –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º inputs
    console.log('3Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º transaction inputs...');
    const inputs: TransactionInput[] = selectedUtxos.map(utxo => ({
      previousOutpoint: utxo.outpoint,
      signatureScript: '', // –ü–æ–¥–ø–∏—Å—å –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ—à–µ–ª—å–∫–æ–º
      sequence: '18446744073709551615',
    }));

    // –®–∞–≥ 4: –°–æ–∑–¥–∞–µ–º outputs
    console.log('4Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º transaction outputs...');
    const fee = 1000n; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –≤ sompi
    const changeAmount = totalInputAmount - targetAmountSompi - fee;

    const outputs: TransactionOutput[] = [
      // Output –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
      {
        amount: targetAmountSompi.toString(),
        scriptPublicKey: {
          version: 0,
          scriptPublicKey: addressToScript(toAddress), // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –≤ script
        },
      },
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–¥–∞—á—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (changeAmount > 0n) {
      outputs.push({
        amount: changeAmount.toString(),
        scriptPublicKey: {
          version: 0,
          scriptPublicKey: addressToScript(fromAddress),
        },
      });
    }

    // –®–∞–≥ 5: –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    console.log('5Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...');
    const transaction: Transaction = {
      version: 1,
      inputs,
      outputs,
      lockTime: '0',
      subnetworkId: '0000000000000000000000000000000000000000',
    };

    console.log('   ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–∞!');
    console.log('   –ü–æ–¥–ø–∏—Å—å –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∫–æ—à–µ–ª—å–∫–µ —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏');

    // –®–∞–≥ 6: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    console.log('6Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...');
    const submitResult = await node.submitTransaction(transaction);

    if (submitResult.ok && submitResult.result) {
      const txId = submitResult.result.transactionId;
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
      console.log(`   TX ID: ${txId}`);
      console.log(`   –°—É–º–º–∞: ${amount} HTN`);
      console.log(`   –ö–æ–º–∏—Å—Å–∏—è: ${node.formatAmount(fee.toString())} HTN`);

      return txId;
    } else {
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${submitResult.error}`);
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
    return null;
  }
}

/**
 * –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±–æ—Ä–∞ UTXO –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
function selectUtxosForAmount(utxos: any[], targetAmount: bigint): any[] {
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º UTXO –æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É
  const sortedUtxos = utxos.sort((a, b) => {
    const amountA = BigInt(a.utxoEntry.amount);
    const amountB = BigInt(b.utxoEntry.amount);
    return amountA > amountB ? -1 : 1;
  });

  const selected: any[] = [];
  let currentAmount = 0n;

  for (const utxo of sortedUtxos) {
    const utxoAmount = BigInt(utxo.utxoEntry.amount);
    selected.push(utxo);
    currentAmount += utxoAmount;

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é –∫ —Ü–µ–ª–µ–≤–æ–π —Å—É–º–º–µ
    const targetWithFee = targetAmount + 1000n; // +1000 sompi –∫–æ–º–∏—Å—Å–∏—è

    if (currentAmount >= targetWithFee) {
      break;
    }
  }

  return currentAmount >= targetAmount ? selected : [];
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –≤ script (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
 */
function addressToScript(address: string): string {
  // –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞! –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
  // –∫–æ—Ç–æ—Ä–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç hoosat: –∞–¥—Ä–µ—Å –≤ script public key
  console.log('‚ö†Ô∏è  –ó–ê–ì–õ–£–®–ö–ê: addressToScript() –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
  return '76a914' + '0'.repeat(40) + '88ac'; // –ü—Ä–∏–º–µ—Ä P2PKH script
}

/**
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
async function monitorTransactionStatus(node: HoosatNode, txId: string): Promise<void> {
  console.log('\nüîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');

  const maxAttempts = 10;
  let attempts = 0;

  const checkStatus = async (): Promise<void> => {
    try {
      attempts++;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ mempool
      const mempoolResult = await node.getMempoolEntry(txId);

      if (mempoolResult.ok && mempoolResult.result?.transaction) {
        console.log(`[${attempts}] üü° –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ mempool (–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)`);

        if (attempts < maxAttempts) {
          setTimeout(checkStatus, 5000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        } else {
          console.log('‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—Å–µ –µ—â–µ –≤ mempool');
        }
        return;
      }

      // –ï—Å–ª–∏ –Ω–µ –≤ mempool, –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
      console.log(`[${attempts}] ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ mempool`);
    } catch (error) {
      console.log(`[${attempts}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error}`);

      if (attempts < maxAttempts) {
        setTimeout(checkStatus, 5000);
      }
    }
  };

  // –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(checkStatus, 2000);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
function handleTransactionError(error: string | null): void {
  if (!error) return;

  console.log('\nüîß –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏:');

  if (error.includes('insufficient funds')) {
    console.log('   üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å');
  } else if (error.includes('fee too low')) {
    console.log('   üí∏ –ö–æ–º–∏—Å—Å–∏—è —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ - —É–≤–µ–ª–∏—á—å—Ç–µ fee');
  } else if (error.includes('invalid signature')) {
    console.log('   ‚úçÔ∏è  –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ');
  } else if (error.includes('double spend')) {
    console.log('   üîÑ –ü–æ–ø—ã—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–∏—è - UTXO —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã');
  } else if (error.includes('orphan')) {
    console.log('   üë∂ Orphan —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è - —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  } else {
    console.log(`   ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`);
  }
}

/**
 * –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏
 */
async function calculateOptimalFee(node: HoosatNode, transactionSize: number): Promise<bigint> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ mempool –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∏—Å—Å–∏–π
    const mempoolResult = await node.getMempoolEntries();

    if (mempoolResult.ok && mempoolResult.result) {
      const entries = mempoolResult.result.entries;

      if (entries.length === 0) {
        // Mempool –ø—É—Å—Ç - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è
        return 100n; // 100 sompi
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –≤ mempool
      const fees = entries.map(entry => BigInt(entry.fee || '0'));
      fees.sort((a, b) => (a > b ? 1 : -1));

      // –ë–µ—Ä–µ–º –º–µ–¥–∏–∞–Ω–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é
      const medianFee = fees[Math.floor(fees.length / 2)];

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–¥–∏–∞–Ω–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é, –Ω–æ –Ω–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞
      return medianFee > 100n ? medianFee : 100n;
    }
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é');
  }

  return 100n; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

// –≠–∫—Å–ø–æ—Ä—Ç—ã
export { demonstrateTransactionSending, createAndSendTransaction, monitorTransactionStatus, calculateOptimalFee };

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
if (require.main === module) {
  console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥!');
  console.log('   –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã');
  console.log('   –∏ –∞–¥—Ä–µ—Å–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ scripts.\n');

  demonstrateTransactionSending().catch(console.error);
}
