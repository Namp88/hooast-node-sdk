import { HoosatNode } from '../src';

async function demonstrateGetInfo() {
  const node = new HoosatNode({
    host: '54.38.176.95',
    port: 42420,
  });

  console.log('üì° –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–¥–µ...\n');

  try {
    const infoResult = await node.getInfo();

    if (infoResult.ok && infoResult.result) {
      const info = infoResult.result;

      console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–¥–µ:');
      console.log(`   –í–µ—Ä—Å–∏—è —Å–µ—Ä–≤–µ—Ä–∞: ${info.serverVersion}`);
      console.log(`   P2P ID: ${info.p2pId.substring(0, 20)}...`);
      console.log(`   –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: ${info.isSynced ? '‚úÖ' : '‚ùå'}`);
      console.log(`   UTXO –∏–Ω–¥–µ–∫—Å: ${info.isUtxoIndexed ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
      console.log(`   Mempool: ${info.mempoolSize} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –Ω–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã
      console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–¥—ã:');

      if (!info.isSynced) {
        console.log('‚ö†Ô∏è  –ù–æ–¥–∞ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏');
      }

      if (!info.isUtxoIndexed) {
        console.log('‚ö†Ô∏è  UTXO –∏–Ω–¥–µ–∫—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ñ—É–Ω–∫—Ü–∏–∏ getBalance(), getUtxos() —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥—É—Ç');
        console.log('    –ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–æ–¥—É —Å —Ñ–ª–∞–≥–æ–º --utxoindex');
      }

      if (info.isSynced && info.isUtxoIndexed) {
        console.log('‚úÖ –ù–æ–¥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
      }

      // –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä—Å–∏–∏
      console.log('\nüìã –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä—Å–∏–∏:');
      const version = parseVersion(info.serverVersion);
      console.log(`   –í–µ—Ä—Å–∏—è: ${version.major}.${version.minor}.${version.patch}`);

      if (version.major < 1) {
        console.log('‚ö†Ô∏è  –ù–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç pre-release –≤–µ—Ä—Å–∏—é');
      }

      // –ê–Ω–∞–ª–∏–∑ mempool
      console.log('\nüíæ –ê–Ω–∞–ª–∏–∑ mempool:');
      const mempoolSize = parseInt(info.mempoolSize);

      if (mempoolSize === 0) {
        console.log('üü¢ Mempool –ø—É—Å—Ç - —Å–µ—Ç—å —Å–ø–æ–∫–æ–π–Ω–∞—è');
      } else if (mempoolSize < 100) {
        console.log(`üü° Mempool: ${mempoolSize} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π - –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å`);
      } else if (mempoolSize < 1000) {
        console.log(`üü† Mempool: ${mempoolSize} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π - –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å`);
      } else {
        console.log(`üî¥ Mempool: ${mempoolSize} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π - –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å`);
        console.log('    –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–æ–≥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –º–µ–¥–ª–µ–Ω–Ω–µ–µ –æ–±—ã—á–Ω–æ–≥–æ');
      }
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–¥–µ:', infoResult.error);
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–æ–¥–µ:', error);
    console.log('\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('   ‚Ä¢ –ù–æ–¥–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞');
    console.log('   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–æ—Å—Ç –∏–ª–∏ –ø–æ—Ä—Ç');
    console.log('   ‚Ä¢ –°–µ—Ç–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã');
    console.log('   ‚Ä¢ –§–∞–µ—Ä–≤–æ–ª –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
  }
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–µ—Ä—Å–∏–∏
 */
function parseVersion(versionString: string): { major: number; minor: number; patch: number } {
  // –ü—Ä–∏–º–µ—Ä—ã: "v1.2.3", "1.2.3-beta", "v0.12.5+commit.abc123"
  const match = versionString.match(/v?(\d+)\.(\d+)\.(\d+)/);

  if (match) {
    return {
      major: parseInt(match[1]),
      minor: parseInt(match[2]),
      patch: parseInt(match[3]),
    };
  }

  return { major: 0, minor: 0, patch: 0 };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ SDK —Å –Ω–æ–¥–æ–π
 */
async function checkCompatibility(node: HoosatNode): Promise<boolean> {
  try {
    const infoResult = await node.getInfo();

    if (!infoResult.ok || !infoResult.result) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–¥–µ');
      return false;
    }

    const info = infoResult.result;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    const checks = [
      {
        name: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è',
        passed: info.isSynced,
        message: '–ù–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞',
      },
      {
        name: 'UTXO –∏–Ω–¥–µ–∫—Å',
        passed: info.isUtxoIndexed,
        message: '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ –Ω—É–∂–µ–Ω UTXO –∏–Ω–¥–µ–∫—Å',
      },
      {
        name: '–í–µ—Ä—Å–∏—è',
        passed: !info.serverVersion.includes('unknown'),
        message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–æ–¥—ã',
      },
    ];

    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:');

    let allPassed = true;
    for (const check of checks) {
      const status = check.passed ? '‚úÖ' : '‚ùå';
      console.log(`   ${status} ${check.name}`);

      if (!check.passed) {
        console.log(`      ${check.message}`);
        allPassed = false;
      }
    }

    if (allPassed) {
      console.log('\n‚úÖ SDK –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º —Å –Ω–æ–¥–æ–π!');
    } else {
      console.log('\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏');
    }

    return allPassed;
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:', error);
    return false;
  }
}

/**
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–æ–¥—ã
 */
async function monitorNodeHealth(node: HoosatNode): Promise<void> {
  console.log('üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–¥—ã...\n');

  setInterval(async () => {
    try {
      const infoResult = await node.getInfo();

      if (infoResult.ok && infoResult.result) {
        const info = infoResult.result;
        const timestamp = new Date().toLocaleTimeString();

        console.log(`[${timestamp}] –°—Ç–∞—Ç—É—Å: ${info.isSynced ? 'üü¢' : 'üî¥'} | Mempool: ${info.mempoolSize}`);

        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        const mempoolSize = parseInt(info.mempoolSize);
        if (mempoolSize > 2000) {
          console.log(`‚ö†Ô∏è  [${timestamp}] –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ mempool: ${mempoolSize} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
        }

        if (!info.isSynced) {
          console.log(`‚ùå [${timestamp}] –ù–æ–¥–∞ –ø–æ—Ç–µ—Ä—è–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é!`);
        }
      } else {
        const timestamp = new Date().toLocaleTimeString();
        console.log(`‚ùå [${timestamp}] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–¥—ã`);
      }
    } catch (error) {
      const timestamp = new Date().toLocaleTimeString();
      console.log(`üí• [${timestamp}] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–æ–¥–µ`);
    }
  }, 10000); // –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–¥—ã
async function quickHealthCheck(host: string, port: number): Promise<void> {
  console.log(`üè• –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–¥—ã ${host}:${port}...\n`);

  const node = new HoosatNode({ host, port, timeout: 5000 });

  const startTime = Date.now();

  try {
    const infoResult = await node.getInfo();
    const responseTime = Date.now() - startTime;

    if (infoResult.ok && infoResult.result) {
      const info = infoResult.result;

      console.log('‚úÖ –ù–æ–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç');
      console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTime}ms`);
      console.log(`üì¶ –í–µ—Ä—Å–∏—è: ${info.serverVersion}`);
      console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: ${info.isSynced ? '–î–∞' : '–ù–µ—Ç'}`);
      console.log(`üíæ Mempool: ${info.mempoolSize} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);

      // –†–µ–π—Ç–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è
      let healthScore = 0;
      if (info.isSynced) healthScore += 40;
      if (info.isUtxoIndexed) healthScore += 30;
      if (responseTime < 1000) healthScore += 20;
      if (parseInt(info.mempoolSize) < 500) healthScore += 10;

      console.log(`üè• –ó–¥–æ—Ä–æ–≤—å–µ –Ω–æ–¥—ã: ${healthScore}/100`);

      if (healthScore >= 80) {
        console.log('üü¢ –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
      } else if (healthScore >= 60) {
        console.log('üü° –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
      } else {
        console.log('üî¥ –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è');
      }
    } else {
      console.log('‚ùå –ù–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error}`);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç—ã
export { demonstrateGetInfo, checkCompatibility, monitorNodeHealth, quickHealthCheck };

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
if (require.main === module) {
  demonstrateGetInfo()
    .then(() => {
      console.log('\nüîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...');

      const node = new HoosatNode({
        host: '54.38.176.95',
        port: 42420,
      });

      return checkCompatibility(node);
    })
    .catch(console.error);
}
