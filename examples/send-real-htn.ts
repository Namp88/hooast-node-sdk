import { HoosatNode } from '../src';
import { CryptoUtils, TransactionBuilder } from '../src/utils/crypto.utils';

/**
 * –ü–æ–ª–Ω—ã–π –ø—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ HTN —Å –∞–¥—Ä–µ—Å–∞
 * –í—Å–µ —á—Ç–æ –Ω—É–∂–Ω–æ - —ç—Ç–æ privateKey –æ—Ç –∞–¥—Ä–µ—Å–∞
 */
async function sendHTN() {
  // 1Ô∏è‚É£ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—à–µ–ª–µ–∫ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
  const privateKeyHex = '4ca34b781f6eaeee59be8d9629516d9b1d16e587e57890d1b381c72fcb8a9e4a'; // –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const wallet = CryptoUtils.importKeyPair(privateKeyHex);

  console.log('üíº –ö–æ—à–µ–ª–µ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:');
  console.log(`   –ê–¥—Ä–µ—Å: ${wallet.address}\n`);

  // 2Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–æ–¥–µ
  const node = new HoosatNode({
    host: '54.38.176.95',
    port: 42420,
  });

  // 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
  console.log('üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å...');
  const balanceResult = await node.getBalance(wallet.address);

  if (!balanceResult.ok || balanceResult.result.balance === '0') {
    console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∞–¥—Ä–µ—Å–µ');
    return;
  }

  const balance = balanceResult.result.balance;
  console.log(`   –ë–∞–ª–∞–Ω—Å: ${node.formatAmount(balance)} HTN\n`);

  // 4Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º UTXOs –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  console.log('üì¶ –ü–æ–ª—É—á–∞–µ–º UTXOs...');
  const utxosResult = await node.getUtxosByAddresses([wallet.address]);

  if (!utxosResult.ok || utxosResult.result.utxos.length === 0) {
    console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö UTXOs');
    return;
  }

  const utxos = utxosResult.result.utxos;
  console.log(`   –ù–∞–π–¥–µ–Ω–æ ${utxos.length} UTXO\n`);

  // 5Ô∏è‚É£ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
  const recipientAddress = 'hoosat:qz95mwas8ja7ucsernv9z335rdxxqswff7wvzenl29qukn5qs3lsqfsa4pd74'; // –ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
  const amountToSend = '0.25'; // –°–∫–æ–ª—å–∫–æ HTN –æ—Ç–ø—Ä–∞–≤–∏—Ç—å

  console.log('üì§ –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:');
  console.log(`   –û—Ç–ø—Ä–∞–≤–∏—Ç—å: ${amountToSend} HTN`);
  console.log(`   –ù–∞ –∞–¥—Ä–µ—Å: ${recipientAddress}\n`);

  try {
    // 6Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const transaction = await buildAndSignTransaction(wallet.privateKey, wallet.address, recipientAddress, amountToSend, utxos, node);

    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∞!');
    console.log(`   TX ID: ${CryptoUtils.getTransactionId(transaction)}\n`);

    // 7Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–µ—Ç—å
    console.log('üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–µ—Ç—å...');
    const submitResult = await node.submitTransaction(transaction);

    if (submitResult.ok) {
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      console.log(`   TX ID: ${submitResult.result.transactionId}`);
      console.log(`   Explorer: https://explorer.hoosat.fi/tx/${submitResult.result.transactionId}`);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', submitResult.error);
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error);
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
async function buildAndSignTransaction(
  privateKey: Buffer,
  fromAddress: string,
  toAddress: string,
  amountHTN: string,
  utxos: any[],
  node: HoosatNode
) {
  const builder = new TransactionBuilder();

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ sompi
  const targetAmount = BigInt(node.parseAmount(amountHTN));

  // –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
  const estimatedFee = BigInt(CryptoUtils.calculateFee(utxos.length, 2)); // 2 outputs (–ø–æ–ª—É—á–∞—Ç–µ–ª—å + —Å–¥–∞—á–∞)

  // –í—ã–±–∏—Ä–∞–µ–º UTXOs
  const { selectedUtxos, totalInput } = selectUtxosForAmount(utxos, targetAmount + estimatedFee);

  if (selectedUtxos.length === 0) {
    throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ + –∫–æ–º–∏—Å—Å–∏—è');
  }

  console.log('   üìä –î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
  console.log(`      –û—Ç–ø—Ä–∞–≤–∏—Ç—å: ${node.formatAmount(targetAmount)} HTN`);
  console.log(`      –ö–æ–º–∏—Å—Å–∏—è: ${node.formatAmount(estimatedFee)} HTN`);
  console.log(`      UTXOs: ${selectedUtxos.length}`);

  // –î–æ–±–∞–≤–ª—è–µ–º inputs
  selectedUtxos.forEach(utxo => {
    builder.addInput(
      {
        outpoint: utxo.outpoint,
        utxoEntry: {
          amount: utxo.utxoEntry.amount,
          scriptPublicKey: utxo.utxoEntry.scriptPublicKey.scriptPublicKey,
          blockDaaScore: utxo.utxoEntry.blockDaaScore,
          isCoinbase: utxo.utxoEntry.isCoinbase,
        },
      },
      privateKey
    );
  });

  // Output –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
  builder.addOutput(toAddress, targetAmount.toString());

  // –°–¥–∞—á–∞ (change) –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–µ–±–µ
  const change = totalInput - targetAmount - estimatedFee;
  if (change > 0n) {
    builder.addOutput(fromAddress, change.toString());
    console.log(`      –°–¥–∞—á–∞: ${node.formatAmount(change)} HTN`);
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
  builder.setFee(estimatedFee.toString());

  // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –ø–æ–¥–ø–∏—Å—å—é
  builder.validate();

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º
  return await builder.sign();
}

/**
 * –í—ã–±–æ—Ä UTXOs –¥–ª—è —Å—É–º–º—ã
 */
function selectUtxosForAmount(utxos: any[], targetAmount: bigint): { selectedUtxos: any[]; totalInput: bigint } {
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É
  const sorted = [...utxos].sort((a, b) => {
    const amountA = BigInt(a.utxoEntry.amount);
    const amountB = BigInt(b.utxoEntry.amount);
    return amountA > amountB ? -1 : 1;
  });

  const selected: any[] = [];
  let totalInput = 0n;

  for (const utxo of sorted) {
    const amount = BigInt(utxo.utxoEntry.amount);
    selected.push(utxo);
    totalInput += amount;

    if (totalInput >= targetAmount) {
      break;
    }
  }

  return { selectedUtxos: selected, totalInput };
}

// –ó–∞–ø—É—Å–∫
sendHTN().catch(console.error);
