import { HoosatNode } from '../src';
import { HoosatUtils } from '../src/utils/utils';

async function demonstrateWalletBalances() {
  const node = new HoosatNode({
    host: '54.38.176.95',
    port: 42420,
  });

  console.log('üí∞ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–∞–º–∏...\n');

  // ==================== 1. SINGLE BALANCE ====================

  console.log('üìç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –æ–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞:');

  try {
    const address = 'hoosat:qyp2uxq7rl0a95npw0yay62chv22l4f33hd8nween6g5jcge4lk57tqsfw88n2d';

    const balanceResult = await node.getBalance(address);

    if (balanceResult.ok && balanceResult.result) {
      const balance = balanceResult.result;

      console.log(`   –ê–¥—Ä–µ—Å: ${address.substring(0, 30)}...`);
      console.log(`   –ë–∞–ª–∞–Ω—Å (raw): ${balance.balance} sompi`);
      console.log(`   –ë–∞–ª–∞–Ω—Å (HTN): ${HoosatUtils.sompiToAmount(balance.balance)} HTN`);

      // –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞
      const balanceHTN = parseFloat(HoosatUtils.sompiToAmount(balance.balance));

      if (balanceHTN === 0) {
        console.log('   –°—Ç–∞—Ç—É—Å: üî¥ –ê–¥—Ä–µ—Å –ø—É—Å—Ç–æ–π');
      } else if (balanceHTN < 1) {
        console.log('   –°—Ç–∞—Ç—É—Å: üü° –ú–∞–ª—ã–π –±–∞–ª–∞–Ω—Å');
      } else if (balanceHTN < 100) {
        console.log('   –°—Ç–∞—Ç—É—Å: üü¢ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å');
      } else {
        console.log('   –°—Ç–∞—Ç—É—Å: üü¢ –ö—Ä—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å');
      }
    } else {
      console.error('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', balanceResult.error);

      if (balanceResult.error?.includes('utxoindex')) {
        console.log('   üí° –†–µ—à–µ–Ω–∏–µ: –ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–æ–¥—É —Å —Ñ–ª–∞–≥–æ–º --utxoindex');
      }
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error);
  }

  // ==================== 2. MULTIPLE BALANCES ====================

  console.log('\nüìç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–¥—Ä–µ—Å–æ–≤:');

  try {
    const addresses = [
      'hoosat:qz8hek32xdryqstk6ptvvfzmrsrns95h7nd2r9f55epnxx7eummegyxa7f2lu',
      'hoosat:qqdythqca8axcrvl7k0ep62yyzprcv8qw4xvlyvwnq7srx3angqrk92n74kut',
    ];

    const balancesResult = await node.getBalances(addresses);

    if (balancesResult.ok && balancesResult.result) {
      const balances = balancesResult.result.balances;

      console.log(`   –ü–æ–ª—É—á–µ–Ω–æ –±–∞–ª–∞–Ω—Å–æ–≤: ${balances.length}`);
      console.log('');

      let totalBalance = 0n;

      balances.forEach((balance, index) => {
        const balanceHTN = HoosatUtils.sompiToAmount(balance.balance);
        const shortAddress = balance.address.substring(0, 30) + '...';

        console.log(`   ${index + 1}. ${shortAddress}`);
        console.log(`      –ë–∞–ª–∞–Ω—Å: ${balanceHTN} HTN`);

        totalBalance += BigInt(balance.balance);
      });

      console.log('');
      console.log(`   üíé –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${HoosatUtils.sompiToAmount(totalBalance.toString())} HTN`);

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∞–ª–∞–Ω—Å–∞–º
      console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');

      const nonZeroBalances = balances.filter(b => b.balance !== '0');
      const emptyAddresses = balances.length - nonZeroBalances.length;

      console.log(`   –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–¥—Ä–µ—Å–∞: ${nonZeroBalances.length}/${balances.length}`);
      console.log(`   –ü—É—Å—Ç—ã–µ –∞–¥—Ä–µ—Å–∞: ${emptyAddresses}`);

      if (nonZeroBalances.length > 0) {
        const avgBalance = totalBalance / BigInt(nonZeroBalances.length);
        console.log(`   –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${HoosatUtils.sompiToAmount(avgBalance.toString())} HTN`);
      }
    } else {
      console.error('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤:', balancesResult.error);
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error);
  }

  // ==================== 3. WALLET PORTFOLIO ====================

  console.log('\nüìä –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∫–æ—à–µ–ª—å–∫–∞:');

  try {
    // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
    const walletAddresses = [
      'hoosat:qz8hek32xdryqstk6ptvvfzmrsrns95h7nd2r9f55epnxx7eummegyxa7f2lu',
      'hoosat:qqdythqca8axcrvl7k0ep62yyzprcv8qw4xvlyvwnq7srx3angqrk92n74kut',
    ];

    const portfolio = await analyzeWalletPortfolio(node, walletAddresses);

    console.log(`   –í—Å–µ–≥–æ –∞–¥—Ä–µ—Å–æ–≤: ${portfolio.totalAddresses}`);
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: ${portfolio.activeAddresses}`);
    console.log(`   –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${portfolio.totalBalance} HTN`);
    console.log(`   –ö—Ä—É–ø–Ω–µ–π—à–∏–π –∞–¥—Ä–µ—Å: ${portfolio.largestBalance} HTN`);
    console.log(`   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: ${portfolio.distribution}`);
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è:', error);
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∫–æ—à–µ–ª—å–∫–∞
 */
async function analyzeWalletPortfolio(node: HoosatNode, addresses: string[]) {
  const balancesResult = await node.getBalances(addresses);

  if (!balancesResult.ok || !balancesResult.result) {
    throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: ${balancesResult.error}`);
  }

  const balances = balancesResult.result.balances;

  // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  let totalBalance = 0n;
  let largestBalance = 0n;
  let activeAddresses = 0;

  balances.forEach(balance => {
    const amount = BigInt(balance.balance);
    totalBalance += amount;

    if (amount > 0n) {
      activeAddresses++;
      if (amount > largestBalance) {
        largestBalance = amount;
      }
    }
  });

  // –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
  let distribution = '–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ';
  if (activeAddresses > 0) {
    const avgBalance = totalBalance / BigInt(activeAddresses);
    const ratio = Number(largestBalance) / Number(avgBalance);

    if (ratio > 10) {
      distribution = '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ';
    } else if (ratio > 3) {
      distribution = '–ù–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ';
    }
  }

  return {
    totalAddresses: addresses.length,
    activeAddresses,
    totalBalance: HoosatUtils.sompiToAmount(totalBalance.toString()),
    largestBalance: HoosatUtils.sompiToAmount(largestBalance.toString()),
    distribution,
  };
}

/**
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–æ–≤
 */
async function monitorBalanceChanges(node: HoosatNode, addresses: string[]): Promise<void> {
  console.log('üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–ª–∞–Ω—Å–æ–≤...\n');

  let previousBalances = new Map<string, string>();

  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
  const initialResult = await node.getBalances(addresses);
  if (initialResult.ok && initialResult.result) {
    initialResult.result.balances.forEach(balance => {
      previousBalances.set(balance.address, balance.balance);
    });
  }

  setInterval(async () => {
    try {
      const currentResult = await node.getBalances(addresses);

      if (currentResult.ok && currentResult.result) {
        const timestamp = new Date().toLocaleTimeString();

        currentResult.result.balances.forEach(balance => {
          const previousBalance = previousBalances.get(balance.address) || '0';

          if (balance.balance !== previousBalance) {
            const change = BigInt(balance.balance) - BigInt(previousBalance);
            const changeHTN = HoosatUtils.sompiToAmount(change.toString());
            const direction = change > 0n ? 'üìà' : 'üìâ';
            const shortAddress = balance.address.substring(0, 20) + '...';

            console.log(`[${timestamp}] ${direction} ${shortAddress}: ${changeHTN > '0' ? '+' : ''}${changeHTN} HTN`);

            previousBalances.set(balance.address, balance.balance);
          }
        });
      }
    } catch (error) {
      const timestamp = new Date().toLocaleTimeString();
      console.log(`[${timestamp}] –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–ª–∞–Ω—Å–æ–≤`);
    }
  }, 10000); // –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –Ω–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–∞–º–∏
 */
async function checkBalanceFeatureAvailability(node: HoosatNode): Promise<boolean> {
  try {
    const infoResult = await node.getInfo();

    if (!infoResult.ok || !infoResult.result) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–¥–µ');
      return false;
    }

    if (!infoResult.result.isUtxoIndexed) {
      console.error('‚ùå UTXO –∏–Ω–¥–µ–∫—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–æ–¥—É —Å —Ñ–ª–∞–≥–æ–º: --utxoindex');
      return false;
    }

    if (!infoResult.result.isSynced) {
      console.warn('‚ö†Ô∏è  –ù–æ–¥–∞ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ - –±–∞–ª–∞–Ω—Å—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏');
    }

    console.log('‚úÖ –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã');
    return true;
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
    return false;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç—ã
export { demonstrateWalletBalances, analyzeWalletPortfolio, monitorBalanceChanges, checkBalanceFeatureAvailability };

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
if (require.main === module) {
  checkBalanceFeatureAvailability(
    new HoosatNode({
      host: '54.38.176.95',
      port: 42420,
    })
  )
    .then(isAvailable => {
      if (isAvailable) {
        return demonstrateWalletBalances();
      } else {
        console.log('‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
      }
    })
    .catch(console.error);
}
