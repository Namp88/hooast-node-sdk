import { HoosatNode } from '../src';
import { CryptoUtils, TransactionBuilder } from '../src/utils/crypto.utils';

async function testRealTransaction() {
  console.log('üåê –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω–æ–π –Ω–æ–¥–æ–π\n');

  const node = new HoosatNode({
    host: '54.38.176.95',
    port: 42420,
  });

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–¥—ã
  console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–æ–¥–µ...');
  const info = await node.getInfo();

  if (!info.ok) {
    console.error('‚ùå –ù–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', info.error);
    return;
  }

  console.log(`   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ${info.result.serverVersion}`);
  console.log(`   Synced: ${info.result.isSynced}`);
  console.log(`   UTXO Indexed: ${info.result.isUtxoIndexed}\n`);

  if (!info.result.isUtxoIndexed) {
    console.log('‚ö†Ô∏è  UTXO –∏–Ω–¥–µ–∫—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∑–∞–ø—É—Å—Ç–∏ —Å --utxoindex\n');
    return;
  }

  // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫
  console.log('2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫...');
  const testWallet = CryptoUtils.generateKeyPair();
  console.log(`   Address: ${testWallet.address}\n`);

  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
  console.log('3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å...');
  const balance = await node.getBalance(testWallet.address);

  if (balance.ok) {
    console.log(`   Balance: ${node.formatAmount(balance.result.balance)} HTN\n`);
  } else {
    console.log(`   ‚ö†Ô∏è  –û—à–∏–±–∫–∞: ${balance.error}\n`);
  }

  // 4. –ü–æ–ª—É—á–∞–µ–º UTXOs (–µ—Å–ª–∏ –µ—Å—Ç—å)
  console.log('4Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º UTXOs...');
  const utxos = await node.getUtxosByAddresses([testWallet.address]);

  if (utxos.ok && utxos.result.utxos.length > 0) {
    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${utxos.result.utxos.length} UTXO\n`);

    // 5. –°–æ–∑–¥–∞–µ–º –†–ï–ê–õ–¨–ù–£–Æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    console.log('5Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...');
    const utxo = utxos.result.utxos[0];
    const recipient = CryptoUtils.generateKeyPair();

    const amount = BigInt(utxo.utxoEntry.amount);
    const sendAmount = amount / 2n; // –ü–æ–ª–æ–≤–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    const fee = 1000n;
    const change = amount - sendAmount - fee;

    try {
      const tx = await new TransactionBuilder()
        .addInput(
          {
            outpoint: utxo.outpoint,
            utxoEntry: {
              amount: utxo.utxoEntry.amount,
              scriptPublicKey: utxo.utxoEntry.scriptPublicKey.scriptPublicKey,
              blockDaaScore: utxo.utxoEntry.blockDaaScore,
              isCoinbase: utxo.utxoEntry.isCoinbase,
            },
          },
          testWallet.privateKey
        )
        .addOutput(recipient.address, sendAmount.toString())
        .addOutput(testWallet.address, change.toString())
        .sign();

      console.log('   ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∞!');
      console.log(`   TX ID: ${CryptoUtils.getTransactionId(tx)}\n`);

      // –í–ù–ò–ú–ê–ù–ò–ï: –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–µ—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
      console.log('‚ö†Ô∏è  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)');
      console.log('   –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –∫–æ–¥ –Ω–∏–∂–µ:\n');

      // const result = await node.submitTransaction(tx);
      // if (result.ok) {
      //   console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', result.result.transactionId);
      // }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
    }
  } else {
    console.log('   ‚ÑπÔ∏è  UTXO –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n');
    console.log('   –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å –Ω–µ–º–Ω–æ–≥–æ HTN –Ω–∞ –∞–¥—Ä–µ—Å:');
    console.log(`   ${testWallet.address}\n`);
  }

  console.log('‚úÖ –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω–æ–π –Ω–æ–¥–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!');
}

testRealTransaction().catch(console.error);
