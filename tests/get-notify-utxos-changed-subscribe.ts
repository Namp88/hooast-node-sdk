import { HoosatNode, HoosatUtils } from '../src';
import { UtxoChange, UtxoChanges, UtxoEntry } from '../src/models/streaming/streaming.types';

async function setupWalletMonitoring(): Promise<void> {
  const node = new HoosatNode({
    host: '54.38.176.95',
    port: 42420,
  });

  // –ê–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  const walletAddresses: string[] = [
    'hoosat:qz8hek32xdryqstk6ptvvfzmrsrns95h7nd2r9f55epnxx7eummegyxa7f2lu',
    'hoosat:qqdythqca8axcrvl7k0ep62yyzprcv8qw4xvlyvwnq7srx3angqrk92n74kut',
  ];

  try {
    // üì° –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await node.subscribeToUtxoChanges(walletAddresses);
    console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ UTXO –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞');

    // üí∞ –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ (—Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
    node.on('utxoChanged', (change: UtxoChange) => {
      const { address, changes } = change;

      console.log(`\nüí≥ –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è ${address.substring(0, 20)}...:`);

      // –ù–æ–≤—ã–µ UTXO (–≤—Ö–æ–¥—è—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏)
      changes.added.forEach(utxo => {
        const amount: string = HoosatUtils.formatAmount(utxo.amount);
        console.log(`  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: ${amount} HTN`);
        console.log(`     TX: ${utxo.outpoint.transactionId.substring(0, 20)}...`);

        // üîî –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        showNotification(`–ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç—ë–∂: ${amount} HTN`);

        // üì± –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ UI
        updateWalletBalance(address);
      });

      // –ü–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ UTXO (–∏—Å—Ö–æ–¥—è—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏)
      changes.removed.forEach((utxo: UtxoEntry) => {
        const amount: string = HoosatUtils.formatAmount(utxo.amount);
        console.log(`  ‚ùå –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${amount} HTN`);
        console.log(`     TX: ${utxo.outpoint.transactionId.substring(0, 20)}...`);

        // üì± –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ UI
        updateWalletBalance(address);
      });
    });

    // üåê –°–ª—É—à–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–µ—Ç–∏ (—Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
    node.on('utxosChanged', (allChanges: UtxoChanges) => {
      const totalAdded: number = allChanges.added.length;
      const totalRemoved: number = allChanges.removed.length;

      if (totalAdded > 0 || totalRemoved > 0) {
        console.log(`üìä –°–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: +${totalAdded} -${totalRemoved} UTXO`);
        updateNetworkStats(totalAdded, totalRemoved);
      }
    });

    // ‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (—Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
    node.on('streamingError', (error: Error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', error.message);
      handleStreamingError(error);
    });

    // üîÑ –°–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏)
    node.on('streamEnded', () => {
      console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...');
    });

    node.on('streamReconnected', () => {
      console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
    });

    node.on('streamMaxReconnectAttemptsReached', () => {
      console.error('‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      handleMaxReconnectAttempts();
    });

    // –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º
    console.log('üéØ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');

    // Graceful shutdown
    setupGracefulShutdown(node);
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
    throw error;
  }
}

// ==================== –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–´–ï HELPER –§–£–ù–ö–¶–ò–ò ====================

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
function showNotification(message: string): void {
  // –î–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
  if (typeof window !== 'undefined' && 'Notification' in window) {
    new Notification('Hoosat Wallet', { body: message });
  }

  // –î–ª—è Node.js –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å node-notifier
  console.log(`üîî ${message}`);
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ UI
 */
async function updateWalletBalance(address: string): Promise<void> {
  try {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è ${address.substring(0, 20)}...`);

    // –ü—Ä–∏–º–µ—Ä: –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    // const balance = await node.getBalance(address);
    // updateUI(address, balance);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ${address}:`, error);
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ç–∏
 */
function updateNetworkStats(added: number, removed: number): void {
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ UI
  console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: +${added} -${removed}`);

  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏, —Å—á—ë—Ç—á–∏–∫–∏ –∏ —Ç.–¥.
  const activityLevel: 'low' | 'medium' | 'high' = getActivityLevel(added + removed);
  console.log(`üìä –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏: ${activityLevel}`);
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏
 */
function getActivityLevel(totalChanges: number): 'low' | 'medium' | 'high' {
  if (totalChanges < 10) return 'low';
  if (totalChanges < 50) return 'medium';
  return 'high';
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ streaming
 */
function handleStreamingError(error: Error): void {
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
  console.error('Streaming error details:', {
    message: error.message,
    stack: error.stack,
    timestamp: new Date().toISOString(),
  });

  // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  // sendErrorToMonitoring(error);

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...');
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 */
function handleMaxReconnectAttempts(): void {
  console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ω–æ–¥–µ');
  showNotification('–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ω–æ–¥–µ Hoosat');

  // –ú–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –Ω–æ–¥—É
  // showNodeSelectionDialog();
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –ª–µ—Ç—É
 */
async function addNewAddressToMonitoring(node: HoosatNode, newAddress: string): Promise<void> {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
    if (!HoosatUtils.isValidAddress(newAddress)) {
      throw new Error(`–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å: ${newAddress}`);
    }

    await node.subscribeToUtxoChanges([newAddress]);
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è ${newAddress.substring(0, 20)}...`);

    showNotification(`–î–æ–±–∞–≤–ª–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–¥—Ä–µ—Å–∞: ${newAddress.substring(0, 20)}...`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:', error);
    showNotification('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
    throw error;
  }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
 */
function setupGracefulShutdown(node: HoosatNode): void {
  const shutdown = async (signal: string): Promise<void> => {
    console.log(`\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...`);

    try {
      await node.unsubscribeFromUtxoChanges();
      node.disconnect();
      console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ:', error);
    } finally {
      process.exit(0);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
  process.on('SIGINT', () => shutdown('SIGINT')); // Ctrl+C
  process.on('SIGTERM', () => shutdown('SIGTERM')); // –°–∏—Å—Ç–µ–º–Ω—ã–π shutdown
  process.on('SIGUSR2', () => shutdown('SIGUSR2')); // nodemon restart
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  setupWalletMonitoring().catch((error: Error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}
