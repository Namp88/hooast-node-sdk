import { HoosatNode, HoosatUtils } from '../src';

async function demonstrateNewMethods() {
  const node = new HoosatNode({
    host: '54.38.176.95',
    port: 42420,
  });

  // ==================== 1. GET UTXOs ====================

  console.log('üîç –ü–æ–ª—É—á–∞–µ–º UTXOs –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤...\n');

  const addresses = [
    'hoosat:qz8hek32xdryqstk6ptvvfzmrsrns95h7nd2r9f55epnxx7eummegyxa7f2lu',
    'hoosat:qqdythqca8axcrvl7k0ep62yyzprcv8qw4xvlyvwnq7srx3angqrk92n74kut',
  ];

  try {
    const utxosResult = await node.getUtxosByAddresses(addresses);

    console.log(utxosResult.result.utxos);

    if (utxosResult.ok && utxosResult.result) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${utxosResult.result.utxos.length} UTXO:`);

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º UTXO –ø–æ –∞–¥—Ä–µ—Å–∞–º
      const utxosByAddress = utxosResult.result.utxos.reduce(
        (acc, utxo) => {
          if (!acc[utxo.address]) {
            acc[utxo.address] = [];
          }
          acc[utxo.address].push(utxo);
          return acc;
        },
        {} as Record<string, typeof utxosResult.result.utxos>
      );

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –∞–¥—Ä–µ—Å—É
      Object.entries(utxosByAddress).forEach(([address, utxos]) => {
        console.log(`\nüìç ${address.substring(0, 20)}...:`);
        console.log(`   UTXO: ${utxos.length}`);

        const totalAmount = utxos.reduce((sum, utxo) => {
          return sum + BigInt(utxo.utxoEntry.amount);
        }, 0n);

        console.log(`   –ë–∞–ª–∞–Ω—Å: ${HoosatUtils.formatAmount(totalAmount.toString())} HTN`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 UTXO
        utxos.slice(0, 3).forEach((utxo, index) => {
          const amount = HoosatUtils.formatAmount(utxo.utxoEntry.amount);
          console.log(`   ${index + 1}. ${amount} HTN (${utxo.outpoint.transactionId.substring(0, 20)}...)`);
        });

        if (utxos.length > 3) {
          console.log(`   ... –∏ –µ—â—ë ${utxos.length - 3} UTXO`);
        }
      });
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è UTXO:', utxosResult.error);
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error);
  }

  // ==================== 2. GET BLUE SCORE ====================

  console.log('\nüìä –ü–æ–ª—É—á–∞–µ–º Blue Score —Å–µ—Ç–∏...\n');

  try {
    const blueScoreResult = await node.getVirtualSelectedParentBlueScore();

    if (blueScoreResult.ok && blueScoreResult.result) {
      console.log(`‚úÖ –¢–µ–∫—É—â–∏–π Blue Score: ${blueScoreResult.result.blueScore}`);

      // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–µ—Ç–∏
      const blueScore = parseInt(blueScoreResult.result.blueScore);
      console.log(`   –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–µ—Ç–∏: ${blueScore.toLocaleString()} –±–ª–æ–∫–æ–≤`);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Blue Score:', blueScoreResult.error);
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error);
  }

  // ==================== 3. –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ü–†–ò–ú–ï–† ====================

  console.log('\nüí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º UTXO –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const walletAddress = 'hoosat:qz8hek32xdryqstk6ptvvfzmrsrns95h7nd2r9f55epnxx7eummegyxa7f2lu';
    const utxosResult = await node.getUtxosByAddresses([walletAddress]);

    if (utxosResult.ok && utxosResult.result) {
      const availableUtxos = utxosResult.result.utxos;

      if (availableUtxos.length === 0) {
        console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö UTXO –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
        return;
      }

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
      const totalBalance = availableUtxos.reduce((sum, utxo) => {
        return sum + BigInt(utxo.utxoEntry.amount);
      }, 0n);

      console.log(`üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${HoosatUtils.formatAmount(totalBalance.toString())} HTN`);
      console.log(`üßæ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ UTXO: ${availableUtxos.length}`);

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º UTXO –ø–æ —Ä–∞–∑–º–µ—Ä—É (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
      const sortedUtxos = availableUtxos.sort((a, b) => {
        const amountA = BigInt(a.utxoEntry.amount);
        const amountB = BigInt(b.utxoEntry.amount);
        return amountA > amountB ? -1 : 1;
      });

      console.log('\nüèÜ –¢–æ–ø-3 –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö UTXO:');
      sortedUtxos.slice(0, 3).forEach((utxo, index) => {
        const amount = HoosatUtils.formatAmount(utxo.utxoEntry.amount);
        const isCoinbase = utxo.utxoEntry.isCoinbase ? ' (coinbase)' : '';
        console.log(`   ${index + 1}. ${amount} HTN${isCoinbase}`);
      });

      // –ü—Ä–∏–º–µ—Ä: –æ—Ç–±–∏—Ä–∞–µ–º UTXO –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ 1 HTN
      const targetAmount = HoosatUtils.parseAmount('1.0'); // 1 HTN –≤ sompi
      const selectedUtxos = selectUtxosForAmount(sortedUtxos, BigInt(targetAmount));

      if (selectedUtxos.length > 0) {
        const selectedAmount = selectedUtxos.reduce((sum, utxo) => {
          return sum + BigInt(utxo.utxoEntry.amount);
        }, 0n);

        console.log(`\n‚úÖ –í—ã–±—Ä–∞–Ω–æ ${selectedUtxos.length} UTXO –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ 1 HTN:`);
        console.log(`   –û–±—â–∞—è —Å—É–º–º–∞: ${HoosatUtils.formatAmount(selectedAmount.toString())} HTN`);
        console.log(`   –°–¥–∞—á–∞: ${HoosatUtils.formatAmount((selectedAmount - BigInt(targetAmount)).toString())} HTN`);
      } else {
        console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ 1 HTN');
      }
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–∏–º–µ—Ä–µ:', error);
  }
}

/**
 * –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±–æ—Ä–∞ UTXO –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
function selectUtxosForAmount(utxos: any[], targetAmount: bigint): any[] {
  const selected: any[] = [];
  let currentAmount = 0n;

  for (const utxo of utxos) {
    const utxoAmount = BigInt(utxo.utxoEntry.amount);
    selected.push(utxo);
    currentAmount += utxoAmount;

    // –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
    if (currentAmount >= targetAmount) {
      break;
    }
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
  return currentAmount >= targetAmount ? selected : [];
}

// –ó–∞–ø—É—Å–∫
demonstrateNewMethods().catch(console.error);
