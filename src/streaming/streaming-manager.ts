import { EventEmitter } from 'events';
import { UtxoChange, UtxoEntry } from '@models/streaming/streaming.types';
import { RequestType } from '@enums/request-type.enum';

export class StreamingManager extends EventEmitter {
  private streamingCall: any = null;
  private subscribedAddresses: Set<string> = new Set();
  private client: any;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 5;
  private reconnectDelay = 2000;

  constructor(client: any) {
    super();
    this.client = client;
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è UTXO –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤
   */
  async subscribeToUtxoChanges(addresses: string[]): Promise<void> {
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
    addresses.forEach(addr => this.subscribedAddresses.add(addr));

    // –ï—Å–ª–∏ streaming —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω - –Ω–µ —Å–æ–∑–¥–∞–≤–∞–µ–º –Ω–æ–≤—ã–π
    if (this.streamingCall && !this.streamingCall.destroyed) {
      return;
    }

    try {
      await this._createStreamingConnection();
      this.reconnectAttempts = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    } catch (error) {
      throw new Error(`Failed to subscribe to UTXO changes: ${error}`);
    }
  }

  /**
   * –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π UTXO
   */
  async unsubscribeFromUtxoChanges(addresses?: string[]): Promise<void> {
    if (addresses) {
      // –£–±–∏—Ä–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
      addresses.forEach(addr => this.subscribedAddresses.delete(addr));

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø–∏—Å–∫—É
      if (this.streamingCall && !this.streamingCall.destroyed) {
        const unsubscribeMessage = {
          [RequestType.StopNotifyingUtxosChangedRequest]: {
            addresses: addresses,
          },
        };
        this.streamingCall.write(unsubscribeMessage);
      }
    } else {
      // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –≤—Å–µ—Ö
      this.subscribedAddresses.clear();
      this._closeStreamingConnection();
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ streaming —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  private async _createStreamingConnection(): Promise<void> {
    this.streamingCall = this.client.MessageStream();

    this.streamingCall.on('data', (response: any) => {
      this._handleStreamingMessage(response);
    });

    this.streamingCall.on('error', (error: any) => {
      console.error('Streaming error:', error);
      this.emit('error', error);
      this._handleStreamingError();
    });

    this.streamingCall.on('end', () => {
      console.log('Streaming connection ended');
      this.emit('streamEnded');
      this._handleStreamingError();
    });

    this.streamingCall.on('close', () => {
      console.log('Streaming connection closed');
      this.emit('streamClosed');
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
    const subscribeMessage = {
      [RequestType.NotifyUtxosChangedRequest]: {
        addresses: Array.from(this.subscribedAddresses),
      },
    };

    this.streamingCall.write(subscribeMessage);
    console.log(`‚úÖ Subscribed to UTXO changes for ${this.subscribedAddresses.size} addresses`);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  private _handleStreamingMessage(response: any): void {
    if (response.utxosChangedNotification) {
      const notification = response.utxosChangedNotification;

      const changes = {
        added: notification.added || [],
        removed: notification.removed || [],
      };

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∞–¥—Ä–µ—Å–∞–º
      const changesByAddress = this._groupUtxoChangesByAddress(changes);

      // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å–∞
      Object.entries(changesByAddress).forEach(([address, addressChanges]) => {
        this.emit('utxoChanged', {
          address,
          changes: addressChanges,
        } as UtxoChange);
      });

      // –û–±—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ –≤—Å–µ–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
      this.emit('utxosChanged', changes);
    }
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –∞–¥—Ä–µ—Å–∞–º
   */
  private _groupUtxoChangesByAddress(changes: any): { [address: string]: any } {
    const grouped: { [address: string]: any } = {};

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ UTXO
    changes.added.forEach((utxo: any) => {
      const address = utxo.address;
      if (!grouped[address]) {
        grouped[address] = { added: [], removed: [] };
      }
      grouped[address].added.push(this._mapUtxoEntry(utxo));
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ UTXO
    changes.removed.forEach((utxo: any) => {
      const address = utxo.address;
      if (!grouped[address]) {
        grouped[address] = { added: [], removed: [] };
      }
      grouped[address].removed.push(this._mapUtxoEntry(utxo));
    });

    return grouped;
  }

  /**
   * –ú–∞–ø–ø–∏–Ω–≥ UTXO entry –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
   */
  private _mapUtxoEntry(utxo: any): UtxoEntry {
    return {
      outpoint: utxo.outpoint,
      amount: utxo.utxoEntry.amount,
      scriptPublicKey: utxo.utxoEntry.scriptPublicKey,
      blockDaaScore: utxo.utxoEntry.blockDaaScore,
      isCoinbase: utxo.utxoEntry.isCoinbase,
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ streaming —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  private _handleStreamingError(): void {
    if (this.subscribedAddresses.size === 0) {
      return; // –ù–µ—Ç —Å–º—ã—Å–ª–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –µ—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
    }

    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      console.error(`‚ùå Max reconnection attempts (${this.maxReconnectAttempts}) reached`);
      this.emit('maxReconnectAttemptsReached');
      return;
    }

    this.reconnectAttempts++;
    const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1); // Exponential backoff

    console.log(`üîÑ Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts}) in ${delay}ms...`);

    setTimeout(async () => {
      try {
        await this._createStreamingConnection();
        console.log('‚úÖ Streaming reconnected successfully');
        this.emit('reconnected');
      } catch (error) {
        console.error('‚ùå Reconnection failed:', error);
        this._handleStreamingError(); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞
      }
    }, delay);
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ streaming —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  private _closeStreamingConnection(): void {
    if (this.streamingCall) {
      this.streamingCall.end();
      this.streamingCall = null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  isConnected(): boolean {
    return this.streamingCall && !this.streamingCall.destroyed;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
   */
  getSubscribedAddresses(): string[] {
    return Array.from(this.subscribedAddresses);
  }

  /**
   * –ü–æ–ª–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
   */
  disconnect(): void {
    this.subscribedAddresses.clear();
    this._closeStreamingConnection();
    this.removeAllListeners();
    this.reconnectAttempts = 0;
  }
}
